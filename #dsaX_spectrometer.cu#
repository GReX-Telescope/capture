#include <iostream>
#include <algorithm>
using std::cout;
using std::cerr;
using std::endl;
#include <stdio.h>
#include <stdlib.h>
#include <cmath>
#include <string.h>
#include <unistd.h>
#include <netdb.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <time.h>

#include "DataSource.h"
#include "PSRDadaRingBuffer.h"

#include <thrust/host_vector.h>
#include <thrust/device_vector.h>
#include <thrust/fill.h>
#include <thrust/sequence.h>
#include <thrust/functional.h>
#include <thrust/transform.h>
#include <thrust/generate.h>
#include <thrust/reduce.h>
#include <thrust/functional.h>

#include "ascii_header.h"
#include "tmutil.h"
#include "dada_def.h"

#include <src/sigproc.h>
#include <src/header.h>

#define NSNAP 1

FILE *output;


void send_string(char *string) /* includefile */
{
  int len;
  len=strlen(string);
  fwrite(&len, sizeof(int), 1, output);
  fwrite(string, sizeof(char), len, output);
}

void send_float(char *name,float floating_point) /* includefile */
{
  send_string(name);
  fwrite(&floating_point,sizeof(float),1,output);
}

void send_double (char *name, double double_precision) /* includefile */
{
  send_string(name);
  fwrite(&double_precision,sizeof(double),1,output);
}

void send_int(char *name, int integer) /* includefile */
{
  send_string(name);
  fwrite(&integer,sizeof(int),1,output);
}

void send_char(char *name, char integer) /* includefile */
{
  send_string(name);
  fwrite(&integer,sizeof(char),1,output);
}


void send_long(char *name, long integer) /* includefile */
{
  send_string(name);
  fwrite(&integer,sizeof(long),1,output);
}

void send_coords(double raj, double dej, double az, double za) /*includefile*/
{
  if ((raj != 0.0) || (raj != -1.0)) send_double("src_raj",raj);
  if ((dej != 0.0) || (dej != -1.0)) send_double("src_dej",dej);
  if ((az != 0.0)  || (az != -1.0))  send_double("az_start",az);
  if ((za != 0.0)  || (za != -1.0))  send_double("za_start",za);
}


PSRDadaRingBuffer::PSRDadaRingBuffer (key_t dada_id) : DataSource ()
{
  dada_error = false;
  printed_first_line = false;

  // create the HDU
  hdu = dada_hdu_create (0);

  // set the shared memory key
  dada_hdu_set_key(hdu, dada_id);
}

PSRDadaRingBuffer::~PSRDadaRingBuffer ()
{
  if (hdu)
  {
		dada_hdu_unlock_write (hdu);
    dada_hdu_disconnect(hdu);
	}
	hdu = 0;
}


bool PSRDadaRingBuffer::connect()
{
  if (dada_hdu_connect (hdu) < 0)
  {
    dada_error = true;
    return false;
  }

  if (dada_hdu_lock_read (hdu) < 0)
  {
    dada_error = true;
    return false;
  }
	return true;
}

bool PSRDadaRingBuffer::disconnect()
{
  if (dada_hdu_unlock_read (hdu) < 0)
  {
    dada_error = true;
    return false;
  }

  if (dada_hdu_disconnect (hdu) < 0)
  {
    dada_error = true;
    return false;
  }  
	return true;
}

bool PSRDadaRingBuffer::read_header()
{
  uint64_t header_size = 0;
  char * header;

  // Wait for the next valid header block
  header = ipcbuf_get_next_read (hdu->header_block, &header_size);
  if (!header)
  {
    cerr << "PSRDadaRingBuffer::read_header could not get next header" << endl;
    dada_error = true;
    return false;
  }

#ifdef DEBUG
  cerr << "==================================================" << endl;
  cerr << header << endl;
  cerr << "==================================================" << endl;
#endif

  // get the required header params
  if (ascii_header_get (header, "NCHAN", "%d", &nchan) < 0)
  {
    cerr << "PSRDadaRingBuffer::read_header could not extract NCHAN from header" << endl;
    dada_error = true;
  }

	float bandwidth = 0;
  if (ascii_header_get (header, "BANDWIDTH", "%f", &bandwidth) < 0)
  {
    if (ascii_header_get (header, "BW", "%f", &bandwidth) < 0)
    {
      cerr << "WARNING: PSRDadaRingBuffer::read_header could not extract BANDWIDTH from header" << endl;
      dada_error = true;
    }
  }

	float cfreq = 0;
  if (ascii_header_get (header, "CFREQ", "%f", &cfreq) < 0)
  {
    if (ascii_header_get (header, "FREQ", "%f", &cfreq) < 0)
    {
      cerr << "WARNING: PSRDadaRingBuffer::read_header could not extract CFREQ from header" << endl;
      dada_error = true;
    }
  }

	if (!dada_error)
	{
		float start_freq = cfreq - (bandwidth / 2);
		float chan_width = bandwidth / nchan;
		float first_chan_cfreq = start_freq + (chan_width / 2);

		// set the cfreq of first chan and the delta freq between chans
		f0 = first_chan_cfreq;
		df = chan_width;
	}

  if (ascii_header_get (header, "NPOL", "%d", &npol) < 0)
  {
    cerr << "PSRDadaRingBuffer::read_header could not extract NPOL from header" << endl;
    dada_error = true; 
  }

  if (ascii_header_get (header, "NBIT", "%d", &nbit) < 0)
  {
    cerr << "PSRDadaRingBuffer::read_header could not extract NBIT from header" << endl;
    dada_error = true; 
  }

  if (ascii_header_get (header, "NANT", "%d", &nant) < 0)
  {
    cerr << "PSRDadaRingBuffer::read_header could not extract NANT from header" << endl;
    dada_error = true; 
  }

  

  if (ascii_header_get (header, "TSAMP", "%f", &tsamp) < 0)
  {
    cerr << "PSRDadaRingBuffer::read_header could not extract TSAMP from header" << endl;
    dada_error = true;
  }

  beam = 0;

  char utc_start_str[64] = "";
  if (ascii_header_get (header, "UTC_START", "%s", utc_start_str) < 0)
  {
    cerr << "PSRDadaRingBuffer::read_header could not extract UTC_START from header" << endl;
    dada_error = true;
  }
  else
    utc_start = str2utctime (utc_start_str);

  stride = nchan * 2;
  cout << "Stride: " << stride << endl;
  
  spectra_rate = 1000000 / (double) tsamp;

  // convert tsamp from usecs (DADA DEFAULT) to seconds
  tsamp /= 1000000;

  if (dada_error)
    return false;

  // if we sucessfully parsed the header, mark buffer cleared
  ipcbuf_mark_cleared (hdu->header_block);
  return true;
}

size_t PSRDadaRingBuffer::get_stride() { return stride; }

// 8.192 us sampling, so 65536 samples gets close to 1 s. 
size_t PSRDadaRingBuffer::get_data(size_t nsamps, char* data)
{

  uint64_t bytes_to_read = nsamps * nchan * 2;
  int64_t  bytes_read = 0;
  
  if (ipcbuf_eod((ipcbuf_t*)hdu->data_block))
    return 0;

  cerr << "PSRDadaRingBuffer::get_data: ipcio_read for " << bytes_to_read << " bytes" << endl;

  bytes_read = ipcio_read (hdu->data_block, data, bytes_to_read);

  if (!printed_first_line)
  {
    printed_first_line = true;
    unsigned char * ptr = (unsigned char *) data;
    int summ;
    for (unsigned i=0; i<4096; i++)
    {
	summ += data[ptr[i]];
    }
    fprintf(stderr, "FIRST LINE SUM %d\n",summ);
  }

  if (bytes_read < 0)
  {
    cerr << "PSRDadaRingBuffer::get_data: ipcio_read error: " << endl;
    dada_error = true;
    return -1;
  }
  
	// actually return the number of samples read, rounding down
	size_t nsamps_read = bytes_read / (nchan * 2);

    if (nsamps_read != nsamps)
    if (!ipcbuf_eod((ipcbuf_t*)hdu->data_block))
		  cerr << "PSRDadaRingBuffer::get_data: returing fewer nsamps than requested!" << endl;

  return nsamps_read;
}

void help() {

     printf("dsaX_spectrometer -nsamps_gulp <> -tsamp sampt (ms)\n");

}

int main(int argc, char* argv[]) {

    // command-line args
    key_t dada_id = 0x0000eada;
    int nsamps_gulp = 1;
    double sampt = 0.065536; 

    for (int i=1;i<argc;i++) {

    	if (strcmp(argv[i],"-nsamps_gulp")==0) {
	   nsamps_gulp = atoi(argv[i+1]);
	}

	if (strcmp(argv[i],"-tsamp")==0) {
	   sampt = atof(argv[i+1]);
	}

	if (strcmp(argv[i],"-h")==0) {
	   help();
 	   return 0;
	}	

    }

    // set up psrdada
    cerr << "Creating PSRDADA client" << endl;
    PSRDadaRingBuffer * d = new PSRDadaRingBuffer(dada_id);
    if( !d || d->get_error() ) {
      cerr << "ERROR: Failed to initialise connection to psrdada" << endl;
      return -1;
    }
    cerr << "Connecting to ring buffer" << endl;
    if (! d->connect())
    {
       cerr << "ERROR: Failed to connection to psrdada ring buffer" << endl;
       return -1;
    }
    cerr << "Waiting for next header / data" << endl;
    // wait for and then read next PSRDADA header/observation
    if (! d->read_header())
    {
       cerr << "ERROR: Failed to connection to psrdada ring buffer" << endl;
       return -1;
    }

    //float tsamp = data_source->get_tsamp() / 1000000;
    int stride = (int)(d->get_stride());

    // allocate memory
    cout << "allocating host vector for " << nsamps_gulp << " samples with size " << (nsamps_gulp * stride) << " bytes" << endl;
    char* h_data;
    h_data = (char *)malloc(sizeof(char)*(nsamps_gulp * stride));
    //unsigned short *write_data = (unsigned short *)malloc(sizeof(unsigned short)*(nsamps_gulp * 2048));

    // set up output file if needed
    time_t rawtime;
    struct tm *info;

    time(&rawtime);
    info = gmtime(&rawtime);
    double tstart = (double)(15022+365.25*info->tm_year+info->tm_yday+info->tm_hour/24.+info->tm_min/(24.*60.)+info->tm_sec/(24.*60.*60.));

    if (!(output = fopen("/home/user/dsatest.fil","wb"))) {
       printf("Couldn't open output file\n");
       return 0;
    }

    send_string("HEADER_START");
    send_string("source_name");
    send_string("DSATEST");
    send_int("machine_id",1);
    send_int("telescope_id",82);
    send_int("data_type",1); // filterbank data
    send_double("fch1",1530.0);
    send_double("foff",-0.1220703);
    send_int("nchans",2048);
    send_int("nbits",16);
    send_double("tstart",tstart);
    send_double("tsamp",sampt/1000.);
    send_int("nifs",1);
    send_string("HEADER_END");

    

    // begin loop over data

    size_t nsamps_read = 1;
    unsigned short tmp;
    while (nsamps_read) {

    	  // read data
    	  nsamps_read = d->get_data (nsamps_gulp*NSNAP, &h_data[0]);

	  /*for (int k=0;k<nsamps_gulp;k++) {

	      for (int snap=0;snap<NSNAP;snap++) {

	      	  for (int i=0;i<512;i++) {
	      	     for (int j=0;j<4;j++) {
	      	     	 tmp = 0;
		  	 tmp |= (unsigned short)(h_data[k*4096+i*8+j*2]) << 8;
		  	 tmp |= (unsigned short)(h_data[k*4096+i*8+j*2+1]);
			 if (snap==0) write_data[k*2048+i*4+3-j] = tmp;
			 else write_data[k*2048+i*4+3-j] += tmp;
	      	      }
	  	 }

	     }

	  }*/

	  fwrite((unsigned short *)(h_data),sizeof(unsigned short),2048*nsamps_gulp,output);
	  //fwrite((unsigned short *)(write_data),sizeof(unsigned short),2048*nsamps_gulp,output);
	  
    }
    
    free(h_data);
    //free(write_data);
    fclose(output);

    return 1;

}
